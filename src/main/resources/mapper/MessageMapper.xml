<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.mapper.MessageMapper">
    <sql id="selectFields">
        id,from_id,to_id,conversation_id,content,status,create_time
    </sql>
    <sql id="insertFields">
        from_id,to_id,conversation_id,content,status,create_time
    </sql>
    <insert id="insertMessage" keyProperty="id">
        insert into message(<include refid="insertFields"></include>)
        values (#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>
    <update id="updateReadMessage">
        update message
        set status = 1
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
    <!--    <update id="updateReadMessage">-->
<!--        update message-->
<!--        set status = 1-->
<!--        where id = #{id}-->
<!--    </update>-->


    <select id="selectConversationList" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where id in (
            select max(id)
            from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        )
        order by id desc
        limit #{offset}, #{limit}
    </select>
    <select id="selectConversionCount" resultType="Integer">
        select count(s.maxId)
        from  (
            select max(id) as maxId
            from message
            where status != 2
            and from_id != 1
            and (from_id = #{userId} or to_id = #{userId})
            group by conversation_id
        ) as s

    </select>
    <select id="selectMessageList" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where conversation_id = #{conversationId}
        and status != 2
        order by id desc
        limit #{offset}, #{limit}
    </select>
    <select id="selectMessageCount" resultType="Integer">
        select count(id)
        from message
        where conversation_id = #{conversationId}
        and status != 2
    </select>
    <select id="selectUnReadMessageCount" resultType="Integer">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId != null">
            and conversation_id = #{conversationId}
        </if>

    </select>
    <select id="selectLatestNotice" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where conversation_id = #{conversationId}
        and status != 2
        and to_id = #{toId}
        and from_id = 1
        order by create_time desc
        limit 0, 1
    </select>
    <select id="selectTotalNoticeCount" resultType="Integer">
        select count(id)
        from message
        where conversation_id = #{conversationId}
        and status != 2
        and from_id = 1
        and to_id = #{toId}
    </select>
    <select id="selectUnreadNoticeCount" resultType="Integer">
        select count(id)
        from message
        where status = 0
        and from_id = 1
        and to_id = #{toId}
        <if test="conversationId != null">
            and conversation_id = #{conversationId}
        </if>
    </select>
    <select id="selectNoticeList" resultType="Message">
        select <include refid="selectFields"></include>
        from message
        where status != 2
        and from_id = 1
        and to_id = #{toId}
        and conversation_id = #{conversationId}
        order by create_time desc
        limit #{offset}, #{limit}
    </select>
</mapper>